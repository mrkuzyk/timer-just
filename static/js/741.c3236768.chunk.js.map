{"version":3,"file":"static/js/741.c3236768.chunk.js","mappings":"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","sources":["webpack://timer-just/./src/components/ButtonBack/buttonBack.module.scss?7f6a","components/ButtonBack/index.js","components/ButtonBack/ButtonBack.jsx","webpack://timer-just/./src/components/ButtonHome/buttonHome.module.scss?786d","components/ButtonHome/index.js","components/ButtonHome/ButtonHome.jsx","helpers/getTimeSum.js","webpack://timer-just/./src/pages/CreateSingleTimer/createSingleTimer.module.scss?416d","pages/CreateSingleTimer/index.js","pages/CreateSingleTimer/CreateSingleTimer.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"buttonBack_btn__5tEjt\"};","import ButtonBack from \"./ButtonBack\";\n\nexport default ButtonBack;","import { NavLink } from \"react-router-dom\";\nimport s from './buttonBack.module.scss';\n\nconst ButtonBack = () => {\n    return (\n        <>\n            <NavLink to='/create' className={s.btn} > Назад </NavLink>\n        </>\n    );\n};\n\nexport default ButtonBack;","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"buttonHome_btn__OggMn\"};","import ButtonHome from \"./ButtonHome\";\n\nexport default ButtonHome;","import { NavLink } from \"react-router-dom\";\nimport s from './buttonHome.module.scss';\n// import PropTypes from 'prop-types';\n\nconst ButtonHome = () => {\n    return (\n        <>\n            <NavLink to='/' className={s.btn} > Головна </NavLink>\n        </>\n    );\n};\n\nexport default ButtonHome;\n\n// ButtonHome.propTypes = {\n//     to: PropTypes.string.isRequired\n// };\n\n","// переводжу весь час в секунди\nconst getTimeSum = (seconds, minutes, hours) => {\n    const second = seconds * 1;\n    const minute = minutes * 60;\n    const hour = (hours * 60) * 60;\n    const sum = second + minute + hour;\n    return sum;\n};\n\nexport default getTimeSum;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"createSingleTimer_container__+-u9p\",\"btnBox\":\"createSingleTimer_btnBox__b5pfL\",\"form\":\"createSingleTimer_form__of1-y\",\"timerNameBox\":\"createSingleTimer_timerNameBox__feI9k\",\"timerName\":\"createSingleTimer_timerName__KbdWv\",\"timerNameSup\":\"createSingleTimer_timerNameSup__6bYNH createSingleTimer_timerName__KbdWv\",\"timerNameInput\":\"createSingleTimer_timerNameInput__N0AGH\",\"timeBox\":\"createSingleTimer_timeBox__KSli7\",\"timeTittle\":\"createSingleTimer_timeTittle__ttUKK createSingleTimer_timerName__KbdWv\",\"timeNumbBox\":\"createSingleTimer_timeNumbBox__QRD7m\",\"timeLabel\":\"createSingleTimer_timeLabel__Wr2uT createSingleTimer_timerName__KbdWv\",\"input\":\"createSingleTimer_input__XYY2X\",\"saveBox\":\"createSingleTimer_saveBox__gWfYQ\",\"saveLabel\":\"createSingleTimer_saveLabel__nDMUX\",\"saveInput\":\"createSingleTimer_saveInput__Xg1Lc\",\"button\":\"createSingleTimer_button__Qwr0+\"};","import CreateSingleTimer from \"./CreateSingleTimer\";\n\nexport default CreateSingleTimer;","import { useEffect, useState } from \"react\";\nimport { Navigate } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { getTimeSum } from 'helpers';\nimport s from './createSingleTimer.module.scss';\nimport ButtonHome from \"components/ButtonHome\";\nimport ButtonBack from \"components/ButtonBack\";\n\nconst CreateSingleTimer = () => {\n    const [timers, setTimers] = useState(() => JSON.parse(localStorage.getItem('timers')) ?? []); // лінива ініціалізація\n    const [disposableTimer, setDisposableTimer] = useState(''); // тут зберігається одноразові дані для переходу на створений таймер\n\n    const [saveTimer, setSaveTimer] = useState(false); // чи потрібно зберігати таймер\n    const [startTimer, setStartTimer] = useState(false); // для переходу на створений таймер\n    const [typeTimer] = useState('single');\n\n    const [name, setName] = useState('');\n    const [hours, setHours] = useState('');\n    const [minutes, setMinutes] = useState('');\n    const [seconds, setSeconds] = useState('');\n\n    const [totalTimeSum, setTotalTimeSum] = useState(''); //загальна сума часу\n    \n    const handleChange = e => {\n        const { name, value } = e.currentTarget; // отримую значення з input\n\n        switch (name) { // записую введені дані \n            case 'name':\n                setName(value);\n                break;\n            \n            case 'hours':\n                setHours(value);\n                break;\n            \n            case 'minutes':\n                setMinutes(value);\n                break;\n            \n            case 'seconds':\n                setSeconds(value);\n                break;\n        \n            default:\n                break;\n        };\n    };\n\n    const handleSave = e => {\n        setSaveTimer(prevState => !prevState) // якщо натиснути чекбокс \"зберегти\"\n    };\n\n    useEffect(() => {\n        const timeSum = getTimeSum(seconds, minutes, hours);\n        setTotalTimeSum(timeSum);\n    },[hours, minutes, seconds]);\n\n    useEffect(() => { // записую в локал сторедж таймери\n        window.localStorage.setItem('timers', JSON.stringify(timers))\n    }, [timers]);\n    \n    useEffect(() => { // записую в локал сторедж одноразовий таймер\n        window.localStorage.setItem('single', JSON.stringify(disposableTimer))\n    }, [disposableTimer]);\n\n    const handleCreate = e => {\n        e.preventDefault();\n\n        const timer = {\n            id: nanoid(6),\n            typeTimer,\n            name,\n            totalTimeSum,\n        }\n\n        if (saveTimer) { setTimers(prevState => [...timers, timer]) }; // якщо потрібно то додаю новий таймер до всіх\n\n        setDisposableTimer(timer); // додаю таймер в одноразовий сторедж\n        setStartTimer(true);\n        reset();\n    };\n\n    const reset = () => {\n        // очищую імпути\n        setName('');\n        setHours('');\n        setMinutes('');\n        setSeconds('');\n        setTotalTimeSum('');\n    };\n\n    return (\n        <div className={s.container}>\n            {startTimer && <Navigate to={`/timers/single`} replace={true} />}\n\n            <div className={s.btnBox}>\n                <ButtonBack/>\n                <ButtonHome/>\n            </div>\n            <form onSubmit={handleCreate} className={s.form}>\n                <div className={s.timerNameBox}>\n                    <label className={s.timerName}> Ім'я для таймера <sup className={s.timerNameSup}>(необов'язково)</sup> \n                        <input \n                            type=\"text\" \n                            name=\"name\"\n                            value={name}\n                            onChange={handleChange}\n                            placeholder=\"Наприклад: Спринт\"\n                            className={s.timerNameInput}\n                            title=\"Введіть ім'я таймера\"\n                        />\n                    </label>\n                </div>\n                <div className={s.timeBox}>\n                    <p className={s.timeTittle}>Час таймера</p>\n                    <div className={s.timeNumbBox}>\n                        <label className={s.timeLabel}> години\n                            <input \n                                type=\"number\" \n                                name=\"hours\"\n                                value={hours}\n                                min=\"0\"\n                                max=\"23\"\n                                pattern=\"[0-9]{2}\"\n                                onChange={handleChange}\n                                placeholder=\"гг\"\n                                className={s.input}\n                                title=\"Години\"\n                            />\n                        </label>\n                        <label className={s.timeLabel}>хвилини\n                            <input \n                                type=\"number\" \n                                name=\"minutes\"\n                                value={minutes}\n                                min=\"0\"\n                                max=\"59\"\n                                onChange={handleChange}\n                                placeholder=\"xx\"\n                                className={s.input}\n                                title=\"Хвилини\"\n                            />\n                        </label>\n                        <label className={s.timeLabel}> секунди\n                            <input \n                                type=\"number\" \n                                name=\"seconds\"\n                                value={seconds}\n                                min=\"0\"\n                                max=\"59\"\n                                onChange={handleChange}\n                                placeholder=\"cc\"\n                                className={s.input}\n                                title=\"Секунди\"\n                            />\n                        </label>\n                    </div>\n                </div>\n                <div className={s.saveBox}>\n                    <label className={s.saveLabel}> Зберегти\n                        <input \n                            type=\"checkbox\"\n                            name=\"handleChange\"\n                            checked={saveTimer}\n                            onChange={handleSave }\n                            className={s.saveInput}\n                        />\n                    </label>\n                </div>\n                {totalTimeSum !== 0 && <button type=\"submit\" className={s.button}>Створити</button>}\n            </form>\n        </div>  \n    );\n};\n\nexport default CreateSingleTimer;\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["to","className","s","seconds","minutes","hours","useState","JSON","parse","localStorage","getItem","timers","setTimers","disposableTimer","setDisposableTimer","saveTimer","setSaveTimer","startTimer","setStartTimer","typeTimer","name","setName","setHours","setMinutes","setSeconds","totalTimeSum","setTotalTimeSum","handleChange","e","currentTarget","value","useEffect","timeSum","getTimeSum","window","setItem","stringify","reset","replace","ButtonBack","ButtonHome","onSubmit","preventDefault","timer","id","nanoid","prevState","type","onChange","placeholder","title","min","max","pattern","checked","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}