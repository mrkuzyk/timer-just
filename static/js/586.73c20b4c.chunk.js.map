{"version":3,"file":"static/js/586.73c20b4c.chunk.js","mappings":"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","sources":["webpack://timer-just/./src/components/IntervalTimer/intervalTimer.module.scss?e93d","webpack://timer-just/./src/components/BoxTimeDisplay/boxTimeDisplay.module.scss?126e","components/BoxTimeDisplay/index.js","components/BoxTimeDisplay/BoxTimeDisplay.jsx","components/IntervalTimer/index.js","components/IntervalTimer/IntervalTimer.jsx","helpers/addLeadingZero.js","helpers/getTimeUnits.js","pages/SavedIntervalTimer/index.js","pages/SavedIntervalTimer/SavedIntervalTimer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"intervalTimer_container__2AmuY\",\"btn\":\"intervalTimer_btn__OuyoB\",\"titleName\":\"intervalTimer_titleName__6WUJI\",\"boxTime\":\"intervalTimer_boxTime__FfNO3\",\"time\":\"intervalTimer_time__lVLTU\",\"button\":\"intervalTimer_button__3gSsc\"};","// extracted by mini-css-extract-plugin\nexport default {\"boxTime\":\"boxTimeDisplay_boxTime__ECpxK\",\"time\":\"boxTimeDisplay_time__8XCbo\"};","import BoxTimeDisplay from \"./BoxTimeDisplay\";\n\nexport default BoxTimeDisplay;","import PropTypes from 'prop-types';\nimport { addLeadingZero } from 'helpers';\nimport s from './boxTimeDisplay.module.scss';\n\n\nconst BoxTimeDisplay = ({ hours, minutes, seconds }) => {\n    return (\n        <div className={s.boxTime}>\n            {hours !== addLeadingZero(0) && <p className={s.time} >{hours} </p>}\n            <p className={s.time} >{minutes} </p>\n            <p className={s.time} >{seconds} </p>\n        </div>\n    );\n};\n\nexport default BoxTimeDisplay;\n\nBoxTimeDisplay.propTypes = {\n    hours: PropTypes.string.isRequired,\n    minutes: PropTypes.string.isRequired,\n    seconds: PropTypes.string.isRequired,\n}","import IntervalTimer from './IntervalTimer.jsx';\n\nexport default IntervalTimer;","import { useEffect, useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { getTimeUnits } from 'helpers';\nimport s from './intervalTimer.module.scss';\nimport useWindowWidth from 'hooks';\nimport BoxTimeDisplay from 'components/BoxTimeDisplay';\nimport NotFoundPage from 'components/NotFoundPage';\n\nconst IntervalTimer = ({data}) => {\n    const [timer, setTimer] = useState({});\n    const [name, setName] = useState('');\n\n    const [timeWork, setTimeWork] = useState('');\n    const [timeRest, setTimeRest] = useState('');\n\n    const [workHours, setWorkHours] = useState('');\n    const [workMinutes, setWorkMinutes] = useState('');\n    const [workSeconds, setWorkSeconds] = useState('');\n    const [restHours, setRestHours] = useState('');\n    const [restMinutes, setRestMinutes] = useState('');\n    const [restSeconds, setRestSeconds] = useState('');\n    const [numbOfRepeat, setNumbOfRepeat] = useState(0);\n\n    const [applyWorkTimer, setApplyWorkTimer] = useState(false);\n    const [applyRestTimer, setApplyRestTimer] = useState(false);\n    const [applyRepeat, setApplyRepeat] = useState(false);\n\n    const intervalId = useRef(null);\n    const timerIsRunning = applyWorkTimer || applyRestTimer;\n    const windowWidth = useWindowWidth();\n    const sample = '00';\n\n    useEffect(() => {\n        setTimer(data)\n    }, [data]);\n\n    useEffect(() => {\n        const { workSum, restSum, numbOfRepeat, name } = timer;\n        setTimeWork(workSum); // отримую суму часу роботи\n        setTimeRest(restSum); // отримую суму часу відпочинку\n\n        if (numbOfRepeat) { setNumbOfRepeat(numbOfRepeat - 1) }; // отримую кількість повторів\n\n        name ? setName(name) : setName('Timer');\n    }, [timer]);\n    \n    useEffect(() => {\n        const { hours, minutes, seconds } = getTimeUnits(timeWork); // дістаю одиниці часу для роботи\n        setWorkHours(hours);\n        setWorkMinutes(minutes);\n        setWorkSeconds(seconds);\n    }, [timeWork]);\n\n    useEffect(() => {\n        const { hours, minutes, seconds } = getTimeUnits(timeRest); // дістаю одиниці часу для відпочинку\n        setRestHours(hours);\n        setRestMinutes(minutes);\n        setRestSeconds(seconds);\n    }, [timeRest]);\n\n    useEffect(() => {\n        if (numbOfRepeat && numbOfRepeat === 0) { return }; // якщо біле повторів немає, то кінець\n        if (!applyWorkTimer) return; // виключаю запуск одразу при завантажені\n\n        intervalId.current = setInterval(() => {\n            setTimeWork(state => state - 1); // таймер для робочого часу\n        }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [applyWorkTimer]);\n\n    useEffect(() => {\n        if (timeWork === 0) {\n            stopTimer(); // автоматичне вимкнення таймера при закінченні часу\n            setApplyWorkTimer(false); // робота неактивна\n            setApplyRestTimer(true); // якщо робочий час закінчився, то автоматично вмикається відпочинок\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [timeWork]);\n\n    useEffect(() => {\n        if (!applyRestTimer) return; // виключаю запуск одразу при завантажені\n\n        intervalId.current = setInterval(() => {\n            setTimeRest(state => state - 1); // таймер для відпочинку\n        }, 1000);\n    }, [applyRestTimer])\n\n    useEffect(() => {\n        if (timeRest === 0) {\n            stopTimer(); // автоматична зупинка відпочинку, при завершені часу\n            setApplyRestTimer(false); // неактивний відпочинок\n        };\n\n        if (timeRest === 0 && numbOfRepeat) { setApplyRepeat(true) }; // запускаю наступне коло\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [timeRest]);\n\n    useEffect(() => {\n        if (applyRepeat && numbOfRepeat) {\n            newRepeat();\n            setApplyWorkTimer(true);\n        };\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [applyRepeat]);\n    \n    const newRepeat = () => {\n        if (numbOfRepeat >= 1) {\n            const { workSum, restSum } = timer;\n            setNumbOfRepeat(state => state - 1); // запускаю наступне коло\n            setTimeWork(workSum); // отримую суму часу роботи\n            setTimeRest(restSum); // отримую суму часу відпочинку\n            startTimer();\n        };\n    };\n\n    const startTimer = () => {\n        if (timeWork !== 0) { setApplyWorkTimer(true) }; // якщо є робочий час то тільки тоді можна запустити його і не дозволяю йти в мінус\n        if (timeWork === 0 && timeRest !== 0) { setApplyRestTimer(true) }; // дозволяю відновлювати відпочинок тільки коли нема робочого часу\n        if (numbOfRepeat) { setApplyRepeat(false) }; // зміна кола неактивна\n    };\n\n    const stopTimer = () => {\n        clearInterval(intervalId.current);\n        setApplyWorkTimer(false); // зупиняю таймер\n        if (timeWork === 0) { setApplyRestTimer(false) }; // якщо робочий час === 0, то тільки тоді можна зупиняти відпочинок\n    };\n\n    return (\n        <div className={s.container}>\n            {timer\n                ?\n                <>\n                    <NavLink to={windowWidth < 1024 ? '/timers' : '/'} className={s.btn} > Назад </NavLink>\n                    <h2 className={s.titleName}>{name} </h2>\n                    {applyWorkTimer &&\n                        <BoxTimeDisplay\n                            hours={workHours}\n                            minutes={workMinutes}\n                            seconds={workSeconds}\n                        />\n                    }\n                    {applyRestTimer &&\n                        <BoxTimeDisplay\n                            hours={restHours}\n                            minutes={restMinutes}\n                            seconds={restSeconds}\n                        />\n                    }\n                    {!applyRestTimer && !applyWorkTimer &&\n                        <BoxTimeDisplay\n                            hours={sample}\n                            minutes={sample}\n                            seconds={sample}\n                        />\n                    }\n                    {!timerIsRunning &&  <button type='button' onClick={startTimer} className={s.button}>Старт</button>}\n                    {timerIsRunning &&  <button type='button' onClick={stopTimer} className={s.button}>Пауза</button>}\n                </>\n                :\n                <NotFoundPage/>\n            }\n        </div>\n    );\n};\n\nexport default IntervalTimer;","// роблю обовязковими 2 цифри, і якщо є лиш одна, то ставлю спереді 0\nconst addLeadingZero = (value) => {\n    return String(value).padStart(2, '0');\n};\n\nexport default addLeadingZero;\n\n","import addLeadingZero from \"./addLeadingZero\";\n\n\n// переводжу суму часу в одиниці\nconst getTimeUnits = (value) => {\n    const hours = addLeadingZero(Math.floor(value / 3600));\n    const minutes = addLeadingZero(Math.floor((value % 3600) / 60));\n    const seconds = addLeadingZero(Math.floor((value % 3600) % 60));\n    return {hours, minutes, seconds};\n};\n\nexport default getTimeUnits;","import SavedIntervalTimer from \"./SavedIntervalTimer\";\n\nexport default SavedIntervalTimer;","import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport IntervalTimer from \"components/IntervalTimer\";\n\n\nconst SavedIntervalTimer = () => {\n    const [timers] = useState(() => JSON.parse(localStorage.getItem('timers')) ?? []);\n    const [timer, setTimer] = useState('');\n    const { id } = useParams();\n\n    useEffect(() => {\n        const availableTimer = timers.find(timer => timer.id === id);\n        if (availableTimer) { setTimer(availableTimer) };\n    }, [id, timers])\n\n    return ( <IntervalTimer data={timer}/> );\n};\n\nexport default SavedIntervalTimer;\n"],"names":["hours","minutes","seconds","className","s","addLeadingZero","data","useState","timer","setTimer","name","setName","timeWork","setTimeWork","timeRest","setTimeRest","workHours","setWorkHours","workMinutes","setWorkMinutes","workSeconds","setWorkSeconds","restHours","setRestHours","restMinutes","setRestMinutes","restSeconds","setRestSeconds","numbOfRepeat","setNumbOfRepeat","applyWorkTimer","setApplyWorkTimer","applyRestTimer","setApplyRestTimer","applyRepeat","setApplyRepeat","intervalId","useRef","timerIsRunning","windowWidth","useWindowWidth","sample","useEffect","workSum","restSum","getTimeUnits","current","setInterval","state","stopTimer","newRepeat","startTimer","clearInterval","to","type","onClick","NotFoundPage","value","String","padStart","Math","floor","JSON","parse","localStorage","getItem","timers","id","useParams","availableTimer","find","IntervalTimer"],"sourceRoot":""}