{"version":3,"file":"static/js/764.dcd2eab1.chunk.js","mappings":"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","sources":["webpack://timer-just/./src/components/BoxTimeDisplay/boxTimeDisplay.module.scss?126e","components/BoxTimeDisplay/index.js","components/BoxTimeDisplay/BoxTimeDisplay.jsx","webpack://timer-just/./src/components/SingleTimer/singleTimer.module.scss?b7ed","components/SingleTimer/index.js","components/SingleTimer/SingleTimer.jsx","helpers/addLeadingZero.js","helpers/getTimeUnits.js","pages/SavedSingleTimer/index.js","pages/SavedSingleTimer/SavedSingleTimer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"boxTime\":\"boxTimeDisplay_boxTime__ECpxK\",\"time\":\"boxTimeDisplay_time__8XCbo\"};","import BoxTimeDisplay from \"./BoxTimeDisplay\";\n\nexport default BoxTimeDisplay;","import PropTypes from 'prop-types';\nimport { addLeadingZero } from 'helpers';\nimport s from './boxTimeDisplay.module.scss';\n\n\nconst BoxTimeDisplay = ({ hours, minutes, seconds }) => {\n    return (\n        <div className={s.boxTime}>\n            {hours !== addLeadingZero(0) && <p className={s.time} >{hours} </p>}\n            <p className={s.time} >{minutes} </p>\n            <p className={s.time} >{seconds} </p>\n        </div>\n    );\n};\n\nexport default BoxTimeDisplay;\n\nBoxTimeDisplay.propTypes = {\n    hours: PropTypes.string.isRequired,\n    minutes: PropTypes.string.isRequired,\n    seconds: PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"singleTimer_container__fRYzz\",\"btn\":\"singleTimer_btn__81FnL\",\"titleName\":\"singleTimer_titleName__MeUsu\",\"button\":\"singleTimer_button__gilOt\"};","import SingleTimer from \"./SingleTimer\";\n\nexport default SingleTimer;","import { useEffect, useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { getTimeUnits } from 'helpers';\nimport s from './singleTimer.module.scss'\nimport useWindowWidth from 'hooks';\nimport BoxTimeDisplay from 'components/BoxTimeDisplay';\nimport NotFoundPage from 'components/NotFoundPage';\n\nconst SingleTimer = ({data}) => {\n    const [timer, setTimer] = useState({});\n    \n    const [runTimer, setRunTimer] = useState(false);\n    \n    const [name, setName] = useState('');\n    const [time, setTime] = useState('');\n    const [hours, setHours] = useState('');\n    const [minutes, setMinutes] = useState('');\n    const [seconds, setSeconds] = useState('');\n    \n    const windowWidth = useWindowWidth();\n    const intervalId = useRef(null);\n\n    useEffect(() => { setTimer(data) }, [data]);\n\n    useEffect(() => {\n        timer.name ? setName(timer.name) : setName('Timer');\n        setTime(timer.totalTimeSum); // витягую суму часу\n    }, [data, timer]);\n    \n    useEffect(() => {\n        const { hours, minutes, seconds } = getTimeUnits(time); // дістаю одиниці часу\n        setHours(hours);\n        setMinutes(minutes);\n        setSeconds(seconds);\n    }, [time]);\n\n    useEffect(() => {\n        if (!runTimer) return; // забороняю запуск одразу при завантаженні \n        intervalId.current = setInterval(() => {\n            setTime(state => state - 1); // запускаю таймер\n        }, 1000);\n    }, [runTimer]);\n\n    useEffect(() => {\n        if (time === 0) stopTimer(); // зупинка тамера коли закінчився час\n    }, [time]);\n\n    const startTimer = () => {\n        setRunTimer(true); \n    };\n\n    const stopTimer = () => {\n        clearInterval(intervalId.current);\n        setRunTimer(false);\n    };\n\n    return (\n        <div className={s.container}>\n            {timer\n                ?\n                <>\n                    <NavLink to={windowWidth < 1024 ? '/timers' : '/'} className={s.btn} > Назад </NavLink>\n                    <h2 className={s.titleName}>{name} </h2>\n                    <BoxTimeDisplay\n                        hours={hours}\n                        minutes={minutes}\n                        seconds={seconds}\n                    />\n                    {!runTimer && <button type='button' onClick={startTimer} className={s.button}>start</button>}\n                    {runTimer && <button type='button' onClick={stopTimer} className={s.button}>pause</button>}\n                </>\n                :\n                <NotFoundPage/>\n            }\n        </div>\n    );\n};\n\nexport default SingleTimer;\n\n//! PropTypes","// роблю обовязковими 2 цифри, і якщо є лиш одна, то ставлю спереді 0\nconst addLeadingZero = (value) => {\n    return String(value).padStart(2, '0');\n};\n\nexport default addLeadingZero;\n\n","import addLeadingZero from \"./addLeadingZero\";\n\n\n// переводжу суму часу в одиниці\nconst getTimeUnits = (value) => {\n    const hours = addLeadingZero(Math.floor(value / 3600));\n    const minutes = addLeadingZero(Math.floor((value % 3600) / 60));\n    const seconds = addLeadingZero(Math.floor((value % 3600) % 60));\n    return {hours, minutes, seconds};\n};\n\nexport default getTimeUnits;","import SavedSingleTimer from \"./SavedSingleTimer\";\n\nexport default SavedSingleTimer","import SingleTimer from \"components/SingleTimer\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\n\nconst SavedSingleTimer = () => {\n    const [timers] = useState(() => JSON.parse(localStorage.getItem('timers')) ?? []);\n    const [timer, setTimer] = useState('');\n    const { id } = useParams();\n\n    useEffect(() => {\n        const availableTimer = timers.find(timer => timer.id === id);\n        if (availableTimer) { setTimer(availableTimer) };\n    }, [id, timers])\n\n    return (<SingleTimer data={timer} />);\n};\n\nexport default SavedSingleTimer;\n"],"names":["hours","minutes","seconds","className","s","addLeadingZero","data","useState","timer","setTimer","runTimer","setRunTimer","name","setName","time","setTime","setHours","setMinutes","setSeconds","windowWidth","useWindowWidth","intervalId","useRef","useEffect","totalTimeSum","getTimeUnits","current","setInterval","state","stopTimer","clearInterval","to","BoxTimeDisplay","type","onClick","NotFoundPage","value","String","padStart","Math","floor","JSON","parse","localStorage","getItem","timers","id","useParams","availableTimer","find","SingleTimer"],"sourceRoot":""}