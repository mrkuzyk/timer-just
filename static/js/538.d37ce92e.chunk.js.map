{"version":3,"file":"static/js/538.d37ce92e.chunk.js","mappings":"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","sources":["helpers/getTimeSum.js","webpack://timer-just/./src/pages/CreateIntervalTimer/createIntervalTimer.module.scss?e956","pages/CreateIntervalTimer/index.js","pages/CreateIntervalTimer/CreateIntervalTimer.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// переводжу весь час в секунди\nconst getTimeSum = (seconds, minutes, hours) => {\n    const second = seconds * 1;\n    const minute = minutes * 60;\n    const hour = (hours * 60) * 60;\n    const sum = second + minute + hour;\n    return sum;\n};\n\nexport default getTimeSum;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"createIntervalTimer_form__bNsx2\",\"inputName\":\"createIntervalTimer_inputName__zca1M\",\"input\":\"createIntervalTimer_input__93cG2\",\"btnBox\":\"createIntervalTimer_btnBox__OyaDZ\",\"button\":\"createIntervalTimer_button__f90ue\"};","import CreateIntervalTimer from \"./CreateIntervalTimer\";\n\nexport default CreateIntervalTimer;","import { useEffect, useState } from \"react\";\nimport { Navigate } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { getTimeSum } from 'helpers';\nimport s from './createIntervalTimer.module.scss';\n\nconst CreateIntervalTimer = () => {\n    const [timers, setTimers] = useState(() => JSON.parse(localStorage.getItem('timers')) ?? []); // лінива ініціалізація\n    const [disposableTimer, setDisposableTimer] = useState('');\n\n    const [saveTimer, setSaveTimer] = useState(false);\n    const [startTimer, setStartTimer] = useState(false);\n    const [typeTimer] = useState('interval');\n\n    const [name, setName] = useState('');\n    const [workHours, setWorkHours] = useState('');\n    const [workMinutes, setWorkMinutes] = useState('');\n    const [workSeconds, setWorkSeconds] = useState('');\n    const [restHours, setRestHours] = useState('');\n    const [restMinutes, setRestMinutes] = useState('');\n    const [restSeconds, setRestSeconds] = useState('');\n\n    const [home, setHome] = useState('');\n    const [workSum, setWorkSum] = useState('');\n    const [restSum, setRestSum] = useState('');\n\n    const handleChange = e => {\n        const { name, value } = e.currentTarget; // отримую значення з інпуту\n\n        switch (name) {  // записую введені дані \n            case 'name':\n                setName(value);\n                break;\n            \n            case 'workHours':\n                setWorkHours(value);\n                break;\n            \n            case 'workMinutes':\n                setWorkMinutes(value);\n                break;\n            \n            case 'workSeconds':\n                setWorkSeconds(value);\n                break;\n            \n            case 'restHours':\n                setRestHours(value);\n                break;\n            \n            case 'restMinutes':\n                setRestMinutes(value);\n                break;\n            \n            case 'restSeconds':\n                setRestSeconds(value);\n                break;\n        \n            default:\n                break;\n        };\n    };\n\n    const handleSave = e => {\n        setSaveTimer(prevState => !prevState) // якщо натиснути чекбокс \"зберегти\"\n    };\n\n    useEffect(() => { \n        const timeSum = getTimeSum( workSeconds, workMinutes, workHours );\n        setWorkSum(timeSum);\n    }, [workSeconds, workMinutes, workHours]);\n\n    useEffect(() => { \n        const timeRestSum = getTimeSum( restSeconds, restMinutes, restHours );\n        setRestSum(timeRestSum);\n    },[restSeconds, restMinutes, restHours])\n\n    const handleCreate = (e) => {\n        e.preventDefault();\n\n        const timer = {\n            id: nanoid(6),\n            typeTimer,\n            name,\n            workSum,\n            restSum\n        };\n\n        if (saveTimer) { setTimers(prevState => [...timers, timer]) }; // якщо потрібно то додаю новий таймер до всіх\n        \n        setDisposableTimer(timer) // додаю таймер в одноразовий сторедж\n        setStartTimer(true) // \n        reset();\n    };\n\n    const reset = () => {\n        // очищую імпути\n        setName('');\n        setWorkHours('');\n        setWorkMinutes('');\n        setWorkSeconds('');\n        setRestHours('');\n        setRestMinutes('');\n        setRestSeconds('');\n        setWorkSum('');\n        setRestSum('');\n    };\n\n    useEffect(() => { // записую в локал сторедж таймери\n        window.localStorage.setItem('timers', JSON.stringify(timers))\n    }, [timers])\n    \n    useEffect(() => { // записую в локал сторедж одноразовий таймер\n        window.localStorage.setItem('interval', JSON.stringify(disposableTimer))\n    },[disposableTimer])\n\n    const homes = () => {\n        setHome(true);\n    }\n\n    return (\n        <>\n            {startTimer && <Navigate to={`/timers/interval`} replace={true} />}\n            {home && <Navigate to={`/`} replace={true} />}\n            <form onSubmit={handleCreate} className={s.form}>\n                <div className={s.inputBox}>\n                    <div>\n                        <label>\n                            <input \n                                type=\"text\" \n                                name=\"name\"\n                                value={name}\n                                onChange={handleChange}\n                                placeholder=\"Timer name\"\n                                className={s.inputName}\n                                title=\"Введіть ім'я таймера\"\n                            />\n                        </label>\n                    </div>\n                    <label>\n                        <input \n                            type=\"number\" \n                            name=\"workHours\"\n                            value={workHours}\n                            min=\"0\"\n                            max=\"23\"\n                            pattern=\"[0-9]{2}\"\n                            onChange={handleChange}\n                            placeholder=\"00\"\n                            className={s.input}\n                            title=\"Години\"\n                        />\n                    </label>\n                    <label>\n                        <input \n                            type=\"number\" \n                            name=\"workMinutes\"\n                            value={workMinutes}\n                            min=\"0\"\n                            max=\"59\"\n                            onChange={handleChange}\n                            placeholder=\"00\"\n                            className={s.input}\n                            title=\"Хвилини\"\n                        />\n                    </label>\n                    <label>\n                        <input \n                            type=\"number\" \n                            name=\"workSeconds\"\n                            value={workSeconds}\n                            min=\"0\"\n                            max=\"59\"\n                            onChange={handleChange}\n                            placeholder=\"00\"\n                            className={s.input}\n                            title=\"Секунди\"\n                        />\n                    </label>\n                </div>\n                <div className={s.inputBox}>\n                    <p>Відпочинок</p>\n                    <label>\n                        <input \n                            type=\"number\" \n                            name=\"restHours\"\n                            value={restHours}\n                            min=\"0\"\n                            max=\"23\"\n                            pattern=\"[0-9]{2}\"\n                            onChange={handleChange}\n                            placeholder=\"00\"\n                            className={s.input}\n                            title=\"Години\"\n                        />\n                    </label>\n                    <label>\n                        <input \n                            type=\"number\" \n                            name=\"restMinutes\"\n                            value={restMinutes}\n                            min=\"0\"\n                            max=\"59\"\n                            onChange={handleChange}\n                            placeholder=\"00\"\n                            className={s.input}\n                            title=\"Хвилини\"\n                        />\n                    </label>\n                    <label>\n                        <input \n                            type=\"number\" \n                            name=\"restSeconds\"\n                            value={restSeconds}\n                            min=\"0\"\n                            max=\"59\"\n                            onChange={handleChange}\n                            placeholder=\"00\"\n                            className={s.input}\n                            title=\"Секунди\"\n                        />\n                    </label>\n                </div>\n                <label> Зберегти\n                    <input \n                        type=\"checkbox\"\n                        name=\"handleChange\"\n                        checked={saveTimer}\n                        onChange={handleSave }\n                    />\n                </label>\n                <div className={s.btnBox}>\n                    <button type=\"button\" onClick={homes}>Home</button>\n                    {workSum !== 0 && <button type=\"submit\" className={s.button}>Створити</button>}\n                </div>\n            </form>\n        </>\n    );\n};\n\nexport default CreateIntervalTimer;","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["seconds","minutes","hours","useState","JSON","parse","localStorage","getItem","timers","setTimers","disposableTimer","setDisposableTimer","saveTimer","setSaveTimer","startTimer","setStartTimer","typeTimer","name","setName","workHours","setWorkHours","workMinutes","setWorkMinutes","workSeconds","setWorkSeconds","restHours","setRestHours","restMinutes","setRestMinutes","restSeconds","setRestSeconds","home","setHome","workSum","setWorkSum","restSum","setRestSum","handleChange","e","currentTarget","value","useEffect","timeSum","getTimeSum","timeRestSum","reset","window","setItem","stringify","to","replace","onSubmit","preventDefault","timer","id","nanoid","prevState","className","s","type","onChange","placeholder","title","min","max","pattern","checked","onClick","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}